--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV GX" LPM_DECODES=8 LPM_WIDTH=3 data enable eq
--VERSION_BEGIN 16.1 cbx_cycloneii 2016:10:24:15:04:16:SJ cbx_lpm_add_sub 2016:10:24:15:04:16:SJ cbx_lpm_compare 2016:10:24:15:04:16:SJ cbx_lpm_decode 2016:10:24:15:04:16:SJ cbx_mgl 2016:10:24:15:05:03:SJ cbx_nadder 2016:10:24:15:04:16:SJ cbx_stratix 2016:10:24:15:04:16:SJ cbx_stratixii 2016:10:24:15:04:16:SJ  VERSION_END


-- Copyright (C) 2016  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Intel and sold by Intel or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = lut 8 
SUBDESIGN decode_l0b
( 
	data[2..0]	:	input;
	enable	:	input;
	eq[7..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[7..0]	: WIRE;
	eq_wire[7..0]	: WIRE;
	w_anode3179w[3..0]	: WIRE;
	w_anode3196w[3..0]	: WIRE;
	w_anode3206w[3..0]	: WIRE;
	w_anode3216w[3..0]	: WIRE;
	w_anode3226w[3..0]	: WIRE;
	w_anode3236w[3..0]	: WIRE;
	w_anode3246w[3..0]	: WIRE;
	w_anode3256w[3..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[7..0] = eq_wire[7..0];
	eq_wire[] = ( w_anode3256w[3..3], w_anode3246w[3..3], w_anode3236w[3..3], w_anode3226w[3..3], w_anode3216w[3..3], w_anode3206w[3..3], w_anode3196w[3..3], w_anode3179w[3..3]);
	w_anode3179w[] = ( (w_anode3179w[2..2] & (! data_wire[2..2])), (w_anode3179w[1..1] & (! data_wire[1..1])), (w_anode3179w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode3196w[] = ( (w_anode3196w[2..2] & (! data_wire[2..2])), (w_anode3196w[1..1] & (! data_wire[1..1])), (w_anode3196w[0..0] & data_wire[0..0]), enable_wire);
	w_anode3206w[] = ( (w_anode3206w[2..2] & (! data_wire[2..2])), (w_anode3206w[1..1] & data_wire[1..1]), (w_anode3206w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode3216w[] = ( (w_anode3216w[2..2] & (! data_wire[2..2])), (w_anode3216w[1..1] & data_wire[1..1]), (w_anode3216w[0..0] & data_wire[0..0]), enable_wire);
	w_anode3226w[] = ( (w_anode3226w[2..2] & data_wire[2..2]), (w_anode3226w[1..1] & (! data_wire[1..1])), (w_anode3226w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode3236w[] = ( (w_anode3236w[2..2] & data_wire[2..2]), (w_anode3236w[1..1] & (! data_wire[1..1])), (w_anode3236w[0..0] & data_wire[0..0]), enable_wire);
	w_anode3246w[] = ( (w_anode3246w[2..2] & data_wire[2..2]), (w_anode3246w[1..1] & data_wire[1..1]), (w_anode3246w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode3256w[] = ( (w_anode3256w[2..2] & data_wire[2..2]), (w_anode3256w[1..1] & data_wire[1..1]), (w_anode3256w[0..0] & data_wire[0..0]), enable_wire);
END;
--VALID FILE
