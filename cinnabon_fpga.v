
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module cinnabon_fpga(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,

	//////////// SMA //////////
	input 		          		SMA_CLKIN,
	output		          		SMA_CLKOUT,

	//////////// LED (High Active) //////////
	output		     [8:0]		LEDG,
	output		    [17:0]		LEDR,

	//////////// KEY (Active Low) //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		    [17:0]		SW,

	//////////// SEG7 (Low Active) //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,
	output		     [6:0]		HEX6,
	output		     [6:0]		HEX7,

	//////////// LCD //////////
	inout 		     [7:0]		LCD_DATA,
	output		          		LCD_EN,
	output		          		LCD_ON,
	output		          		LCD_RS,
	output		          		LCD_RW,

	//////////// SDCARD //////////
	output		          		SD_CLK,
	inout 		          		SD_CMD,
	inout 		     [3:0]		SD_DAT,
	input 		          		SD_WP_N,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [31:0]		DRAM_DQ,
	output		     [3:0]		DRAM_DQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_WE_N,

	//////////// Flash //////////
	output		          		FL_CE_N,
	output		          		FL_OE_N,
	output		          		FL_RESET_N,
	input 		          		FL_RY,
	output		          		FL_WE_N,
	output		          		FL_WP_N,

	//////////// Data and Address bus shared by Flash & SSRAM //////////
	output		    [26:1]		FS_ADDR,
	inout 		    [31:0]		FS_DQ,

	//////////// PCIe //////////
	input 		          		PCIE_PERST_N,
	input 		          		PCIE_REFCLK_P,
	//input 		     [1:0]		PCIE_RX_P,
	//output		     [1:0]		PCIE_TX_P,
	output		          		PCIE_WAKE_N,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO,

	//////////// HSMC, HSMC connect to ADA - High Speed ADC/DAC //////////
	output		          		HSMC_ADA_SCL,
	inout 		          		HSMC_ADA_SDA,
	output		          		HSMC_ADC_CLK_A,
	output		          		HSMC_ADC_CLK_B,
	input 		    [13:0]		HSMC_ADC_DA,
	input 		    [13:0]		HSMC_ADC_DB,
	output		          		HSMC_ADC_OEB_A,
	output		          		HSMC_ADC_OEB_B,
	input 		          		HSMC_ADC_OTR_A,
	input 		          		HSMC_ADC_OTR_B,
	output		          		HSMC_DAC_CLK_A,
	output		          		HSMC_DAC_CLK_B,
	output		    [13:0]		HSMC_DAC_DA,
	output		    [13:0]		HSMC_DAC_DB,
	output		          		HSMC_DAC_MODE,
	output		          		HSMC_DAC_WRT_A,
	output		          		HSMC_DAC_WRT_B,
	input 		          		HSMC_OSC_SMA_ADC4,
	input 		          		HSMC_SMA_DAC4,

	//////////// Fan Control //////////
	inout 		          		FAN_CTRL
);


wire    CLK_65, CLK_125;


wire    g = 0;
wire    v = 1;

wire    ovalid;



wire    [13:0]	sin10_out;
wire    [13:0]	sin_out;
wire    [13:0]	comb;
wire    [31:0]	phasinc1;
wire    [31:0]	phasinc2;

assign  phasinc1 = {g,g,g,g,v,v,g,g,v,v,g,g,v,v,g,g,v,v,g,g,v,v,g,g,v,v,g,g,v,v,g,v};
assign  phasinc2 = {g,v,g,g,g,g,g,g,g,g,g,g,g,g,g,g,g,g,g,g,g,g,g,g,g,g,g,g,g,g,g,g};

assign  DAC_DA = comb; //B
assign  DAC_DB = comb; //A


//===================================================================================
//  Structural coding
//===================================================================================

lpm_nco sin1    (
				   .phi_inc_i(phasinc1),
			      .clk	    (CLK_125),
				   .reset_n  (v),
				   .clken	 (v),
				   .fsin_o	 (sin_out),
				   .fcos_o   (),
				   .out_valid(ovalid)
		        );
				  
lpm_nco sin2   (
				  .phi_inc_i(phasinc2),
				  .clk	   (CLK_125),
				  .reset_n  (v),
				  .clken	   (v),
			     .fsin_o	(sin10_out),
				  .fcos_o	(),
			     .out_valid(ovalid)
		       );

		
lpm_add lpm  (
              .clock (CLK_125),
              .dataa ({g,~sin_out[12],sin_out[11:0]}),
              .datab ({g,~sin10_out[12],sin10_out[11:0]}),
              .result(comb)
             );
				 

pll  pll_100   (
				 .inclk0(CLOCK_50),
                 .pllena(v),
                 .areset(g),
                 .c0    (CLK_125),
                 .c1	(CLK_65)
			   );
				
wire dclk;
		
divclk10 dct(
  .clk(CLOCK_50),
  .oclk(dclk)
  );
  
assign GPIO[0] = dclk;

//=======================================================
//  Structural coding
//=======================================================

assign HSMC_DAC_CLK_B = CLK_125;
assign HSMC_DAC_DA = sin_out;
	//////////// FAN Control //////////
assign FAN_CTRL = 1'bz; // turn on FAN

endmodule





module divclk10(
input clk,
output oclk);

reg [6:0] ctr = 0;
reg rclk =   0;

always @(posedge clk)
begin
  if(ctr>=10)
  begin
    rclk <= ~rclk;
    ctr <= 0;
  end
  else
    ctr <= ctr + 1;

end

assign oclk = rclk;

endmodule

